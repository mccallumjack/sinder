require 'nokogiri'
require 'open-uri'


whitelist = [
  "pydata/pandas",
  "HabitRPG/habitrpg",
  "scikit-learn/scikit-learn",
  "ruby/ruby",
  "golang/go",
  "debops/debops",
  "neovim/neovim",
  "cockroachdb/cockroach",
  "ipfs/go-ipfs",
  "spree/spree",
  "rails/rails",
  "mbostock/d3",
  "jekyll/jekyll",
  "ipython/ipython",
  "mattbaker/ruby-heap-viz",
  "chef/chef",
  "mperham/sidekiq",
  "thoughtbot/factory_girl",
  "gollum/gollum",
  "django/django",
  "jkbrzt/httpie",
  "ansible/ansible",
  "scrapy/scrapy",
  "jquery/jquery",
  "Esri/quickstart-map-js",
  "Esri/map-tour-storytelling-template-js",
  "researchkit/researchkit",
  "jonobr1/two.js",
  "tessalt/echo-chamber-js",
  "google/material-design-lite",
  "FreeCodeCamp/freecodecamp",
  "caskroom/homebrew-cask",
  "arunagw/omniauth-twitter",
  "vinta/awesome-python",
  "donnemartin/data-science-ipython-notebooks",
  "24pullrequests/24pullrequests",
  "aasm/aasm",
  "algorrent/algorrent",
  "formly-js/angular-formly",
  "babel/babel",
  "bundler/bundler",
  "CocoaPods/CocoaPods",
  "exercism/exercism.io",
  "gitlabhq/gitlabhq",
  "growingdevs/growingdevs.github.io",
  "hacken-in/website",
  "instructure/fukuzatsu",
  "pixijs/pixi-haxe",
  "julianguyen/ifme",
  "CenturyLinkLabs/panamax-ui",
  "saltstack/salt",
  "odoo/odoo",
  "rust-lang/rust",
  "sympy/sympy",
  "npm/npm",
  "isaacs/npm",
  "owncloud/core",
  "atom/atom",
  "adobe/brackets",
  "julialang/julia",
  "pydata/pandas",
  "dotcloud/docker",
  "docker/docker",
  "mozilla/servo",
  "servo/servo",
  "rethinkdb/rethinkdb",
  "statsmodels/statsmodels",
  "elasticsearch/elasticsearch",
  "ansible/ansible",
  "numpy/numpy",
  "angular/angular.js",
  "meteor/meteor",
  "angular/angular",
  "cocos2d/cocos2d-x",
  "scikit-learn/scikit-learn",
  "facebook/hhvm",
  "boto/boto",
  "antirez/redis",
  "yiisoft/yii2",
  "openra/openra",
  "scipy/scipy",
  "ipython/ipython",
  "travis-ci/travis-ci",
  "akka/akka",
  "rails/rails",
  "elgg/elgg",
  "elasticsearch/kibana",
  "matplotlib/matplotlib",
  "symfony/symfony",
  "jruby/jruby",
  "conda/conda",
  "fontforge/fontforge",
  "kripken/emscripten",
  "mono/monogame",
  "haskell/cabal",
  "sequelize/sequelize",
  "h4cc/awesome-elixir",
  "facebook/react-native",
  "/semantic-org/semantic-ui",
  "robbyrussell/oh-my-zsh",
  "joyent/node",
  "neovim/neovim",
  "influxdb/influxdb",
  "joomla/joomla-cms",
  "theano/theano",
  "keystonejs/keystone",
  "facebook/react",
  "callemall/material-ui",
  "hrydgard/ppsspp",
  "openframeworks/openframeworks",
  "spring-projects/spring-boot",
  "letsencrypt/letsencrypt",
  "openlayers/openlayers",
  "masayuki0812/c3",
  "composer/composer",
  "yoast/wordpress-seo",
  "ivaynberg/select2",
  "getlantern/lantern",
  "wkhtmltopdf/wkhtmltopdf",
  "trinitycore/trinitycore",
  "sbt/sbt",
  "mxcl/homebrew",
  "toastdriven/django-tastypie",
  "gratipay/gratipay.com",
  "gittip/www.gittip.com",
  "zendframework/zf2",
  "cuberite/cuberite",
  "mc-server/mcserver",
  "chef/chef",
  "opscode/chef",
  "toastdriven/django-haystack",
  "twitter/bootstrap",
  "twbs/bootstrap",
  "diaspora/diaspora",
  "chriseppstein/compass",
  "bitcoin/bitcoin",
  "jgm/pandoc",
  "learnboost/mongoose",
  "emberjs/ember.js",
  "pagekite/mailpile",
  "signalr/signalr",
  "jshint/jshint",
  "the-compiler/qutebrowser",
  "mitchellh/vagrant",
  "neo4j/neo4j",
  "ckan/ckan",
  "celery/celery",
  "graphite-project/graphite-web",
  "graphite-project/graphite-web",
  "dmitrybaranovskiy/raphael",
  "yiisoft/yii",
  "wordpress-mobile/wordpress-ios",
  "netty/netty",
  "playframework/playframework",
  "jashkenas/coffee-script",
  "playframework/play20",
  "mgonto/restangular",
  "kangax/fabric.js",
  "jquery/jquery-mobile",
  "n1k0/casperjs",
  "swiftmailer/swiftmailer",
  "freecodecamp/freecodecamp",
  "fabric/fabric",
  "manastech/crystal",
  "xing/wysihtml5",
  "librenms/librenms",
  "rapid7/metasploit-framework",
  "dc-js/dc.js",
  "osmandapp/osmand",
  "cantino/huginn",
  "heroku/heroku",
  "imathis/octopress",
  "kriswallsmith/assetic",
  "oppia/oppia",
  "ryanb/cancan",
  "twitter/scalding",
  "zencoder/video-js",
  "hakimel/reveal.js",
  "phpdocumentor/phpdocumentor2",
  "sheetjs/js-xlsx",
  "leaflet/leaflet",
  "rejectedsoftware/vibe.d",
  "pivotal/robolectric",
  "scrooloose/nerdtree",
  "wet-boew/wet-boew",
  "mbostock/d3",
  "jigish/slate",
  "getsentry/sentry",
  "sferik/rails_admin",
  "reddit/reddit",
  "block8/phpci",
  "gregbell/active_admin",
  "activeadmin/activeadmin",
  "bower/bower",
  "jugglershu/xvim",
  "rust-lang/cargo",
  "xbmc/xbmc",
  "spree/spree",
  "/xbmc/xbmc",
  "scikit-image/scikit-image",
  "atom/vim-mode",
  "opensuse/open-build-service",
  "plomino/plomino",
  "projectskyfire/skyfireemu",
  "sublimetext/latextools",
  "angular-ui/ui-router",
  "visionmedia/mocha",
  "dylan-lang/opendylan",
  "request/request",
  "joyent/smartos-live",
  "spf13/spf13-vim",
  "systemed/id",
  "cloudhead/less.js",
  "ether/etherpad-lite",
  "divio/django-cms",
  "guillermooo/vintageous",
  "realm/realm-java",
  "wallabag/wallabag",
  "tryghost/ghost",
  "emberjs/data",
  "rtfd/readthedocs.org",
  "daftmonk/generator-angular-fullstack",
  "rubinius/rubinius",
  "whoaverse/whoaverse",
  "sunspot/sunspot",
  "rails-api/active_model_serializers",
  "mikel/mail",
  "webpy/webpy",
  "haiwen/seafile",
  "eventmachine/eventmachine",
  "cakephp/cakephp",
  "zurb/foundation",
  "cocoapods/cocoapods",
  "adobe-webplatform/snap.svg",
  "syncthing/syncthing",
  "tpope/vim-fugitive",
  "scriptcs/scriptcs",
  "libgit2/libgit2sharp",
  "junit-team/junit",
  "getpelican/pelican",
  "binarylogic/authlogic",
  "simbul/baker",
  "emmetio/emmet-atom",
  "psychs/limechat",
  "mitsuhiko/jinja2",
  "mypaint/mypaint",
  "zeromq/libzmq",
  "mitsuhiko/werkzeug"

]

 # Nokogiri methods
def get_contributor_count(repo)
  doc = Nokogiri::HTML(open(repo.html_url))
  doc.css('a:contains("contributors") span.num').text.strip.to_i
end

def contributing_file?(repo)
  doc = Nokogiri::HTML(open(repo.html_url))
  doc.css('a:contains("CONTRIBUTING")').length != 0 ? true : false
end

def code_of_conduct?(repo)
  doc = Nokogiri::HTML(open(repo.html_url))
  doc.css('a:contains("conduct")').length != 0 ? true : false
end

def open_pull_requests(repo)
  doc = Nokogiri::HTML(open(repo.html_url+'/pulls'))
  doc.css('div.left a.selected').text.gsub(/[^\d]/,'').to_i
end

client = Octokit::Client.new(:client_id => ENV['GITHUB_KEY'], :client_secret => ENV['GITHUB_SECRET'])

whitelist.uniq.each do |address|
  begin
    repo = client.repo(address)
    puts "Adding #{repo.name}"
  rescue 
    puts "Unable to find repo on github for #{address}"
  end
  next unless repo.andand.name.present? && Repo.find_by_name(repo.name).nil?
  contributors_count = get_contributor_count(repo)
  contrib_file = contributing_file?(repo)
  pull_request_count = open_pull_requests(repo)
  code_of_conduct = code_of_conduct?(repo)
  Repo.create!(
    github_repo_id: repo.id,
    url: repo.url,
    name: repo.name,
    full_name: repo.full_name,
    html_url: repo.html_url,
    description: repo.description,
    pushed_at: repo.pushed_at,
    stargazers_count: repo.stargazers_count,
    forks_count: repo.forks_count,
    open_issues_count: repo.open_issues_count,
    language: repo.language,
    contributors_count: contributors_count,
    contributors_file: contrib_file,
    pull_request_count: pull_request_count,
    code_of_conduct: code_of_conduct
  )
end
